name: Publish Release

on:
  workflow_call:
    inputs:
      working_dir:
        description: "Working directory"
        type: string
        required: true
env:
  BALLERINA_VERSION: 2201.8.5
  
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run ballerina build
        uses: ballerina-platform/setup-ballerina@v1.1.0
        with:
          version: $BALLERINA_VERSION
          args: pack
        env:
          WORKING_DIR: ${{ inputs.working_dir }}
          JAVA_HOME: /usr/lib/jvm/default-jvm

      - name: Get version from Ballerina.toml
        working-directory: ${{ inputs.working_dir }}
        run: |
          VERSION_NO=$(grep -m 1 'version =' Ballerina.toml | cut -d '=' -f2 | sed 's/\"//g')
          echo "VERSION_NO='$VERSION_NO'" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        run: |
          # Get Branch Name
           BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
           echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          # Release Name
           RELEASE_NAME=${BRANCH_NAME#release-}

           curl -L \
             -X POST \
             -H "Accept: application/vnd.github+json" \
             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
             -H "X-GitHub-Api-Version: 2022-11-28" \
             https://api.github.com/repos/${{ github.repository }}/releases \
             -d '{
               "tag_name": "'"$RELEASE_NAME"'",
               "target_commitish": "'$BRANCH_NAME'",
               "body": "[Automated] Creating tag:  '$RELEASE_NAME'.",
               "name": "'"$RELEASE_NAME"'",
               "body": "Releases",
               "draft": false,
               "prerelease": false,
               "generate_release_notes": false
             }'

      - name: Update version in Ballerina.toml
        id: increment_patch_version
        run: |
          CURRENT_VERSION=$VERSION_NO
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH_VERSION=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
          sed -i "0,/version = \"${CURRENT_VERSION}\"/s//version = \"${NEW_VERSION}\"/" ${{ inputs.working_dir }}/Ballerina.toml
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Ballerina Build after incrementing version
        id: bal_pack_after_version_increment
        run: |
          CURRENT_VERSION=$VERSION_NO
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH_VERSION=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
          
          sed -i "0,/version = \"${CURRENT_VERSION}\"/s//version = \"${NEW_VERSION}\"/" ${{ inputs.working_dir }}/Ballerina.toml

          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Commit and push changes
        id: commit_and_push_changes
        run: |
          # Extract the package name from working directory 
          serviceName=$(basename ${{ inputs.working_dir }})


          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ inputs.working_dir }}/Ballerina.toml
          git add ${{ inputs.working_dir }}/Dependencies.toml   
          git commit -m "[Release ${serviceName} service ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle"
          git push origin ${{ steps.create_release.outputs.BRANCH_NAME }}

          # Set the base and head branches for the pull request
          BASE_BRANCH=main
          HEAD_BRANCH=${{ steps.create_release.outputs.BRANCH_NAME }}

          # Create a pull request
          RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{
            "title": "[Release ${serviceName} service ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle",
            "body": "This PR was created by a GitHub action. Please review and merge.",
            "head": "'"$HEAD_BRANCH"'",
            "base": "'"$BASE_BRANCH"'"
          }' \
          "https://api.github.com/repos/${{ github.repository }}/pulls")

          # Extract the pull request URL from the response
          PR_URL=$(echo $RESPONSE | jq -r '.html_url')

          echo "Pull Request created: $PR_URL"